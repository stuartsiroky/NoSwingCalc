public class calc.controller.CalculatorController extends calc.controller.AbstractController
{

    public void <init>()
    {
        calc.controller.CalculatorController this;
        calc.model.CalculatorModel cm, temp$0;
        calc.view.CalculatorView cv, temp$1;
        calc.view.View temp$2;
        calc.view.JFrameView temp$3;

        this := @this: calc.controller.CalculatorController;
        specialinvoke this.<calc.controller.AbstractController: void <init>()>();
        temp$0 = new calc.model.CalculatorModel;
        specialinvoke temp$0.<calc.model.CalculatorModel: void <init>()>();
        cm = temp$0;
        virtualinvoke this.<calc.controller.CalculatorController: void setModel(calc.model.Model)>(cm);
        temp$1 = new calc.view.CalculatorView;
        specialinvoke temp$1.<calc.view.CalculatorView: void <init>(calc.model.CalculatorModel,calc.controller.CalculatorController)>(cm, this);
        cv = temp$1;
        virtualinvoke this.<calc.controller.CalculatorController: void setView(calc.view.View)>(cv);
        temp$2 = virtualinvoke this.<calc.controller.CalculatorController: calc.view.View getView()>();
        temp$3 = (calc.view.JFrameView) temp$2;
        virtualinvoke temp$3.<calc.view.JFrameView: void setVisible(boolean)>(1);
        return;
    }

    public void operation(java.lang.String)
    {
        calc.controller.CalculatorController this;
        java.lang.String option;
        boolean temp$0, temp$2, temp$4, temp$6;
        calc.model.CalculatorModel cm, cm, cm, cm, cm;
        calc.model.Model temp$1, temp$3, temp$5, temp$7, temp$8;
        int val, temp$9;

        this := @this: calc.controller.CalculatorController;
        option := @parameter0: java.lang.String;
        temp$0 = virtualinvoke option.<java.lang.String: boolean equals(java.lang.Object)>("-");
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = virtualinvoke this.<calc.controller.CalculatorController: calc.model.Model getModel()>();
        cm = (calc.model.CalculatorModel) temp$1;
        virtualinvoke cm.<calc.model.CalculatorModel: void subtract()>();
        goto label11;

     label1:
        nop;
        temp$2 = virtualinvoke option.<java.lang.String: boolean equals(java.lang.Object)>("+");
        if temp$2 == 0 goto label3;

        goto label2;

     label2:
        nop;
        temp$3 = virtualinvoke this.<calc.controller.CalculatorController: calc.model.Model getModel()>();
        cm = (calc.model.CalculatorModel) temp$3;
        virtualinvoke cm.<calc.model.CalculatorModel: void add()>();
        goto label10;

     label3:
        nop;
        temp$4 = virtualinvoke option.<java.lang.String: boolean equals(java.lang.Object)>("Clr");
        if temp$4 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$5 = virtualinvoke this.<calc.controller.CalculatorController: calc.model.Model getModel()>();
        cm = (calc.model.CalculatorModel) temp$5;
        virtualinvoke cm.<calc.model.CalculatorModel: void clear()>();
        goto label9;

     label5:
        nop;
        temp$6 = virtualinvoke option.<java.lang.String: boolean equals(java.lang.Object)>("=");
        if temp$6 == 0 goto label7;

        goto label6;

     label6:
        nop;
        temp$7 = virtualinvoke this.<calc.controller.CalculatorController: calc.model.Model getModel()>();
        cm = (calc.model.CalculatorModel) temp$7;
        virtualinvoke cm.<calc.model.CalculatorModel: void equals()>();
        goto label8;

     label7:
        nop;
        temp$8 = virtualinvoke this.<calc.controller.CalculatorController: calc.model.Model getModel()>();
        cm = (calc.model.CalculatorModel) temp$8;
        temp$9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(option);
        val = temp$9;
        virtualinvoke cm.<calc.model.CalculatorModel: void store(int)>(val);

     label8:
        nop;

     label9:
        nop;

     label10:
        nop;

     label11:
        nop;
        return;
    }
}
